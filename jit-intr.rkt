#lang racket
(require ffi/unsafe)
(require "libjit.rkt")
(require "jit-env.rkt")
(provide register-jit-internals)

(define (register-jit-internals env)
  (register-intrinsics
   (register-internal-instructions env)))

(define (register-intrinsics env)
  env)

(define (register-internal-instructions env)
  (define (get-binary-compiler f)
    (lambda (function rands)
      (f function (car rands) (cadr rands))))
  (define (get-unary-compiler f)
    (lambda (function rands)
      (f function (car rands))))
  (define (register-internal intr reg env)
    (env-extend (car intr) (env-jit-internal-function (reg (cadr intr))) env))
  (define (register-internals intrs reg env)
    (for/fold ([env env])
              ([intr intrs])
      (register-internal intr reg env)))
  (register-internals unary-internals get-unary-compiler
                      (register-internals binary-internals get-binary-compiler env)))

(define binary-internals
  `((jit-null? ,jit_insn_check_null)
    (jit-add ,jit_insn_add)
    (jit-add-ovf ,jit_insn_add_ovf)
    (jit-sub ,jit_insn_sub)
    (jit-sub-ovf ,jit_insn_sub_ovf)
    (jit-mul ,jit_insn_mul)
    (jit-mul-ovf ,jit_insn_mul_ovf)
    (jit-div ,jit_insn_div)
    (jit-rem ,jit_insn_rem)
    (jit-rem-ieee ,jit_insn_rem_ieee)
    (jit-and ,jit_insn_and)
    (jit-or ,jit_insn_or)
    (jit-xor ,jit_insn_xor)
    (jit-shl ,jit_insn_shl)
    (jit-shr ,jit_insn_shr)
    (jit-ushr ,jit_insn_ushr)
    (jit-sshr ,jit_insn_sshr)
    (jit-eq? ,jit_insn_eq)
    (jit-ne? ,jit_insn_ne)
    (jit-lt? ,jit_insn_lt)
    (jit-le? ,jit_insn_le)
    (jit-gt? ,jit_insn_gt)
    (jit-ge? ,jit_insn_ge)
    (jit-cmpl ,jit_insn_cmpl)
    (jit-cmpg ,jit_insn_cmpg)))

(define unary-internals
  `((jit-neg ,jit_insn_neg)
    (jit-to-bool ,jit_insn_to_bool)
    (jit-to-not-bool ,jit_insn_to_not_bool)
    (jit-acos ,jit_insn_acos)
    (jit-asin ,jit_insn_asin)
    (jit-atan ,jit_insn_atan)
    (jit-ceil ,jit_insn_ceil)
    (jit-cos ,jit_insn_cos)
    (jit-cosh ,jit_insn_cosh)
    (jit-exp ,jit_insn_exp)
    (jit-floor ,jit_insn_floor)
    (jit-log ,jit_insn_log)
    (jit-log10 ,jit_insn_log10)
    (jit-rint ,jit_insn_rint)
    (jit-round ,jit_insn_round)
    (jit-sin ,jit_insn_sin)
    (jit-sinh ,jit_insn_sinh)
    (jit-sqrt ,jit_insn_sqrt)
    (jit-tan ,jit_insn_tan)
    (jit-tanh ,jit_insn_tanh)
    (jit-trunc ,jit_insn_trunc)
    (jit-is-nan ,jit_insn_is_nan)
    (jit-is-inf ,jit_insn_is_inf)
    (jit-is-finite ,jit_insn_is_finite)
    (jit-abs ,jit_insn_abs)
    (jit-sign ,jit_insn_sign)))

(module+ test
  (display (register-jit-internals (empty-env))))
